<?xml version="1.0"?>
<!--
  Copyright (c) 2006 Matt Magoffin
  
  This program is free software; you can redistribute it and/or 
  modify it under the terms of the GNU General Public License as 
  published by the Free Software Foundation; either version 2 of 
  the License, or (at your option) any later version.
  
  This program is distributed in the hope that it will be useful, 
  but WITHOUT ANY WARRANTY; without even the implied warranty of 
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
  General Public License for more details.
  
  You should have received a copy of the GNU General Public License 
  along with this program; if not, write to the Free Software 
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
  02111-1307 USA

  $Id: build.xml,v 1.10 2006/10/27 00:43:50 matt Exp $   
-->
<project name="Tidbits" default="help">

	<property file="build.properties" />

	<!-- HyperJAXB 2 properties -->
	<property name="hjb.dir" value="hyperjaxb2-build"/>
	<property name="hjb.db.type" value="postgres"/>
	
	<property name="dir.base" value="."/>
	<property name="dir.source" value="src"/>
	<property name="dir.source.test" value="src-test"/>
	<property name="dir.schema" value="defs/schema"/>
	<property name="dir.build" value="build/ant" />
	<property name="dir.build.cvs" value="build/cvs"/>
	<property name="hibernate.properties" value="${dir.schema}/${hjb.db.type}/hibernate.properties"/>
	<property name="dir.generated" value="${dir.build}/generated/src" />
	<property name="dir.hibernate.mapping" value="${dir.generated}"/>
	<property name="dir.database" value="defs/sql"/>
	<property name="dir.dist" value="dist"/>
	<property name="dir.lib" value="lib"/>
	<property name="dir.web" value="web"/>
	<property name="dir.web.lib" value="${dir.web}/WEB-INF/lib"/>
	
	<property name="app.name" value="tidbits" />
	<property name="build.name" value="TidBits"/>
	<property name="app.path" value="/${app.name}" />
	<property name="app.home" value="${dir.build}/${app.name}/web"/>
	<property name="app.home.backup" value="${app.home}.bak"/>
	
	<property name="dir.app.dest" value="${dir.build}/${app.name}"/>
	<property name="dir.compile.dest" value="${dir.app.dest}/WEB-INF/classes"/>
	<property name="dir.compile.dest.domain" value="${dir.build}/generated/classes"/>
	<property name="compile.debug" value="true" />
	<property name="compile.deprecation" value="false" />
	<property name="compile.optimize" value="true" />
	<property name="compile.nowarn" value="true" />
	
	<property name="jaxb.version" value="1.4"/>
	
	<property name="build.version" value="(local build)"/>
	
	<property name="env.src" value="local" />
	<property name="dir.env" value="environment/${env.src}"/>
	<property name="cvs.env.src" value="example"/>
	<property name="cvs.dir.env" value="environment/${cvs.env.src}"/>
	<property name="cvs.root" value="/data/cvs"/>
	<property name="cvs.compressionlevel" value="6" />
	<property name="cvs.module.name" value="tidbits"/>
	
	<path id="path.svn">
		<fileset dir="${dir.lib}/svn" includes="*.jar"/>
	</path>
	
	<taskdef resource="svntask.properties" classpathref="path.svn"/>
	<property name="svn.tag" value="1.0"/>
	<property name="svn.path" value="/tags/${svn.tag}"/>
	<property name="svn.url" 
		value="https://tidbits.svn.sourceforge.net/svnroot/tidbits/tidbits${svn.path}"/>
	<property name="svn.username" value=""/>
	<property name="svn.password" value=""/>
	<property name="svn.revision" value="HEAD"/>
	<property name="svn.dir.build" value="${dir.build}/svn"/>
	
	<tstamp>
		<format property="build.time" pattern="MM/dd/yyyy hh:mm aa z" />
	</tstamp>
	<property name="version.properties" value="version.properties" />
	<property name="version.txt.name" value="version.txt" />
	
	<property name="catalina.home" value="/opt/tomcat/tomcat5" />
	<property name="catalina.manager.url" value="http://localhost:8080/manager" />
	<property name="catalina.manager.username" value="admin" />
	<property name="catalina.manager.password" value="admin" />
	
	<patternset id="catalina.jars.pat">
		<include name="common/endorsed/*.jar" />
		<include name="common/lib/*.jar" />
		<include name="shared/lib/*.jar" />
		<include name="server/lib/*.jar" />
	</patternset>
	
	<path id="jaxb.generate.path">
		<fileset dir="${dir.web.lib}" includes="*.jar"/>
		<fileset dir="${dir.lib}" includes="**/*.jar"/>
	</path>
	
	<path id="hibernatedoclet.lib.path">
		<fileset dir="${dir.web.lib}" includes="*.jar"/>
		<fileset dir="${dir.lib}" includes="**/*.jar"/>
	</path>
	
	<path id="schemaexport.lib.path">
		<pathelement location="${dir.build}/${app.name}/WEB-INF/classes"/>
		<fileset dir="${dir.web.lib}" includes="*.jar"/>
		<fileset dir="${dir.lib}" includes="**/*.jar"/>
		<fileset dir="${catalina.home}">
			<patternset refid="catalina.jars.pat" />
		</fileset>
	</path>
	
	<path id="compile.path">
		<pathelement location="${dir.build}/${app.name}/WEB-INF/classes"/>
		<fileset dir="${dir.web.lib}" includes="*.jar"/>
		<fileset dir="${dir.lib}" includes="**/*.jar"/>
		<fileset dir="${catalina.home}">
			<patternset refid="catalina.jars.pat" />
		</fileset>
	</path>
	
	<path id="catalina.path">
		<fileset dir="${catalina.home}">
			<patternset refid="catalina.jars.pat"/>
		</fileset>
	</path>
	
	<target name="init">
		<mkdir dir="${dir.build}" />
		<mkdir dir="${dir.build.cvs}" />
		<mkdir dir="${dir.generated}" />
		<mkdir dir="${dir.dist}"/>
	</target>
	
	<target name="generate.domain" depends="init" description="Generate JAXB domain objects from XML schemas">
		<delete>
			<fileset dir="${hjb.dir}/src/main">
				<include name="resources/**"/>
				<include name="java/**"/>
			</fileset>
		</delete>
		<copy todir="${hjb.dir}/src/main/resources">
			<fileset dir="defs/schema">
				<include name="binding.xml"/>
			</fileset>
			<mapper type="glob" from="*.xml" to="*.xjb"/>
		</copy>
		<copy todir="${hjb.dir}/src/main/resources">
			<fileset dir="defs/schema">
				<include name="core.xsd"/>
				<include name="domain.xsd"/>
				<include name="ui.xsd"/>
			</fileset>
		</copy>
		<javac srcdir="${hjb.dir}/src/main/java"
				destdir="${hjb.dir}/src/main/java"
				debug="${compile.debug}" 
				deprecation="${compile.deprecation}" 
				optimize="${compile.optimize}" 
				nowarn="${compile.nowarn}"
				target="1.5"
				source="1.5">
			<!--classpath refid="unit-test.path" /-->
		</javac>				
		<ant antfile="build.xml" inheritall="false" target="generate-sources" dir="${hjb.dir}">
			<property name="hyperjaxb2.export.schema.properties.file" 
				value="${basedir}/${dir.database}/${hjb.db.type}/hibernate.properties"/>
		</ant>

		<delete>
			<fileset dir="${dir.generated}">
				<include name="magoffin/matt/tidbits/domain/*.*"/>
				<include name="magoffin/matt/tidbits/domain/impl/**"/>
			</fileset>
		</delete>
		<copy todir="${dir.generated}">
			<fileset dir="${hjb.dir}/target/generated-sources/xjc">
				<include name="magoffin/matt/tidbits/domain/**"/>
			</fileset>
		</copy>
	
	</target>
	
	<target name="compile.domain" description="Compile the JAXB classes">
		<delete dir="${dir.compile.dest.domain}" failonerror="no"/>
		<mkdir dir="${dir.compile.dest.domain}"/>
		<javac srcdir="${dir.generated}"
				destdir="${dir.compile.dest.domain}"
				debug="${compile.debug}" 
				deprecation="${compile.deprecation}" 
				optimize="${compile.optimize}" 
				nowarn="${compile.nowarn}"
				target="1.5"
				source="1.5"
				fork="true"
				memoryinitialsize="256m"
				memorymaximumsize="400m"
				>
			<classpath refid="compile.path" />
		</javac>
	</target>
			
	<target name="jar.domain" description="Create source and binary JAR out of the JAXB classes">
		<!-- Generate the binary JAR with source attached -->
		<jar destfile="${dir.web.lib}/${app.name}-xml.jar">
			<fileset dir="${dir.compile.dest.domain}">
				<include name="**"/>
			</fileset>
			<fileset dir="${dir.generated}">
				<include name="magoffin/matt/tidbits/domain/**"/>
			</fileset>
		</jar>
	</target>

	<target name="generate-xml" description="Generate new JAXB jar from scratch"
		depends="generate.domain,compile.domain,jar.domain"/>

	<target name="check-has-env">
		<echo>Checking for enivornment ${dir.env}</echo>
		<available file="${dir.env}" type="dir" property="has.env" />
	</target>

	<target name="prepare-env" depends="check-has-env" if="has.env">
		<mkdir dir="${dir.compile.dest}"/>
		<copy todir="${dir.compile.dest}" filtering="yes">
			<fileset dir="${dir.env}" includes="**" excludes="README*"/>
			<!--filterset refid="password.filters"/-->
		</copy>
	</target>

	<!-- Prepare WAR structure -->
	<target name="prepare" description="Prepare WAR build structure"
		depends="prepare-env">
		
		<!-- copy non-environment and non-brand source properties -->
		<mkdir dir="${dir.compile.dest}"/>
		<copy todir="${dir.compile.dest}" includeemptydirs="no">
			<fileset dir="${dir.source}">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
		
		<!-- copy web resourses -->
		<copy todir="${dir.app.dest}">
			<fileset dir="${dir.web}">
				<include name="**"/>
				<exclude name="version.jsp"/>
				<exclude name="WEB-INF/classes/**"/>
			</fileset>
		</copy>
		
		<!-- copy and filter version.jsp file -->
		<copy todir="${dir.app.dest}">
			<fileset dir="${dir.web}">
				<include name="version.jsp"/>
			</fileset>
			<filterset>
				<filter token="APP_NAME" value="${build.name}" />
				<filter token="BUILD_VERSION" value="${build.version}" />
				<filter token="BUILD_DATE" value="${build.time}" />
				<filter token="BUILD_TARGET_ENV" value="${env.src}" />
			</filterset>
		</copy>

	</target>

	<target name="compile" description="Compile source files">
		<mkdir dir="${dir.compile.dest}"/>
		<javac srcdir="${dir.source}"
			destdir="${dir.compile.dest}"
			debug="${compile.debug}" 
			deprecation="${compile.deprecation}" 
			optimize="${compile.optimize}" 
			nowarn="${compile.nowarn}"
			target="1.5"
			source="1.5">
			<classpath refid="compile.path" />
		</javac>
	</target>
	
	<!-- Create the Tidbits WAR file -->
	<target name="war" description="Create application WAR"
		depends="prepare,compile">
		<zip destfile="${dir.build}/${app.name}.war">
			<zipfileset dir="${dir.app.dest}">
				<include name="**"/>
			</zipfileset>
		</zip>
	</target>
		
	<target name="clean" description="Delete build files">
		<delete dir="${dir.build}" />
	</target>

	<!-- 
		CVS-based build targets below 
		
		CVS builds are based on tagged CVS versions, using versions
		tagged as <name>-<major>-<minor>-<build>. The easiest way 
		to pass these to the build is to use command-line property 
		arguments (-D<prop>=<value>). For example, for version 1.2, 
		build number 35, you could call ant like:
		
		ant -Dcvs.version.major=1 -Dcvs.version.minor=2 -Dcvs.version.build=35
		
		Version 1.2 of 'tidbits', build 35, would be tagged 'tidbits-1-2-35'.
		The build version is stored in 'build-version.properties'
		file, so subsequent builds can omit the -D properties if desired.
	-->
	
	<target name="clean-cvs" description="Delete CVS based build files">
		<delete dir="${dir.build.cvs}"/>
	</target>

	<!-- Copy environment properties (to catch local env) -->
	<target name="cvs-prepare" depends="init">
		<mkdir dir="${dir.build.cvs}/${cvs.module.name}/${dir.env}"/>
		<copy todir="${dir.build.cvs}/${cvs.module.name}/${dir.env}">
			<fileset dir="${dir.base}/${dir.env}" includes="**" excludes="README*"/>
		</copy>
	</target>
	
	<!-- ======================================================= -->
	<!-- Set the build version                                   -->
	<!-- ======================================================= -->
	<target name="set_ver_major" if="cvs.version.major">
		<echo message="Setting to major version: ${cvs.version.major}" />
		<propertyfile file="${version.properties}">
			<entry key="app.version.major" type="string" operation="=" 
				value="${cvs.version.major}" />
		</propertyfile>
	</target>
	<target name="set_ver_minor" if="cvs.version.minor">
		<echo message="Setting to minor version: ${cvs.version.minor}" />
		<propertyfile file="${version.properties}">
			<entry key="app.version.minor" type="string" operation="=" 
				value="${cvs.version.minor}" />
		</propertyfile>
	</target>
	<target name="set_ver_build" if="cvs.version.build">
		<echo message="Setting to build version: ${cvs.version.build}" />
		<propertyfile file="${version.properties}">
			<entry key="app.version.build" type="string" operation="=" 
				value="${cvs.version.build}" />
		</propertyfile>
	</target>
	
	<target name="set-version" depends="set_ver_major,set_ver_minor,set_ver_build">
		<property file="${version.properties}" />
		<property name="cvs.build.version" 
			value="${app.version.major}.${app.version.minor}.${app.version.build}" />
		<property name="cvs.tag" 
			value="${app.name}-${app.version.major}-${app.version.minor}-${app.version.build}" />
		<property name="app.archive.name" value="${app.name}-${cvs.build.version}"/>
	</target>

	<!-- ======================================================= -->
	<!-- Build from CVS tag versions                             -->
	<!-- ======================================================= -->

	<target name="cvs-update" description="Update checked out CVS files"
		depends="set-version">

		<echo message="----------------------------------" />
		<echo message="CVS root:    ${cvs.root}" />
		<echo message="CVS module:  ${cvs.module.name}" />
		<echo message="Update dir:  ${dir.build.cvs}/${cvs.module.name}" />
		<echo message="----------------------------------" />

		<echo />
		<echo message="Updating ${cvs.module.name}" />
		<cvs cvsRoot="${cvs.root}" command="update" cvsRsh="ssh" 
			dest="${dir.build.cvs}/${cvs.module.name}" 
			quiet="true" 
			compressionlevel="${cvs.compressionlevel}"/>
	</target>
	
	<target name="cvs-checkout" description="Checkout CVS sources" 
		depends="clean-cvs,set-version">

		<echo message="----------------------------------" />
		<echo message="CVS root:    ${cvs.root}" />
		<echo message="CVS module:  ${cvs.module.name}" />
		<echo message="CVS tag:     ${cvs.tag}" />
		<echo message="Checkout to: ${dir.build.cvs}" />
		<echo message="----------------------------------" />

		<echo />
		<echo message="Checking out ${cvs.module.name}" />
		<cvs cvsRoot="${cvs.root}" command="checkout" cvsRsh="ssh" 
			package="${cvs.module.name}" dest="${dir.build.cvs}" 
			tag="${cvs.tag}" quiet="true" 
			compressionlevel="${cvs.compressionlevel}"/>
	</target>
	
	<!-- CVS build: call either cvs-checkout or cvs-update before calling this -->
	<target name="cvs-build" depends="clean,cvs-prepare,set-version" 
		description="Build from CVS tag versions">

		<echo />
		<echo message="Building application version ${cvs.build.version}..."/>
		<!--path id="cvs.build.path">
		    <pathelement location="${dir.build.cvs}" />
		</path>
		<property name="cbp" refid="cvs.build.path" /-->

		<ant dir="${dir.build.cvs}/${cvs.module.name}" target="war" inheritall="true">
			<property name="build.version" value="${cvs.build.version}"/>
			<property name="dir.build" value="${dir.build}"/>
			<property name="catalina.home" value="${catalina.home}"/>
			<property name="env.src" value="${cvs.env.src}"/>
			<property name="dir.env" value="${cvs.dir.env}"/>
			<property name="app.name" value="${app.archive.name}"/>
		</ant>
	
	</target>

	<!-- ======================================================= -->
	<!-- Build  release TARs from CVS tag versions               -->
	<!-- ======================================================= -->
	<target name="cvs-src-release" depends="cvs-checkout" 
		description="Build source release TAR from CVS tag versions">

		<property name="release-source-dir-name"
			value="${app.archive.name}-src"/>
		<property name="release-source-dir" 
			value="${dir.build}/${release-source-dir-name}" />
		<property name="release-source-name" 
			value="${dir.dist}/${app.archive.name}-src.tbz2" />

		<echo message="Building source release ${release-source-name}" />

		<mkdir dir="${dir.dist}"/>
		<delete dir="${release-source-dir}" />
		<delete file="${release-source-name}" />

		<echo message="Creating source README" />
		<copy file="${dir.build.cvs}/${cvs.module.name}/defs/docs/release/README.src.txt" 
			tofile="${release-source-dir}/README" filtering="true">
			<filterset>
				<filter token="VERSION" value="${cvs.build.version}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Copying source to tar base directory" />
		<copy todir="${release-source-dir}">
			<fileset dir="${dir.build.cvs}">
				<include name="${cvs.module.name}/**" />
				<exclude name="**/build/**" />
				<exclude name="**/dist/**" />
				<exclude name="**/environment/local/**" />
			</fileset>
		</copy>

		<tar tarfile="${release-source-name}" compression="bzip2" 
			longfile="gnu">
			<tarfileset dir="${dir.build}" 
				includes="${release-source-dir-name}/**" />
		</tar>
	</target>
	
	<!-- create binary release -->
	<target name="cvs-bin-release" description="Build binary release TAR from CVS tag versions"
		depends="cvs-build">
		<property name="release-dir-name"
			value="${app.archive.name}"/>
		<property name="release-dir" 
			value="${dir.build}/${release-dir-name}" />
		<property name="release-name" 
			value="${dir.dist}/${app.archive.name}.tbz2" />

		<echo message="Building binary release ${release-name}" />

		<delete dir="${release-dir}" />
		<delete file="${release-name}" />

		<echo message="Creating README" />
		<copy file="${dir.build.cvs}/${cvs.module.name}/defs/docs/release/README.bin.txt" 
			tofile="${release-dir}/README" filtering="true">
			<filterset>
				<filter token="VERSION" value="${cvs.build.version}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Creating NOTES" />
		<copy filtering="true" todir="${release-dir}">
			<fileset dir="${dir.build.cvs}/${cvs.module.name}/defs/docs/release/notes"
				includes="notes-${cvs.build.version}.txt"/>
			<mapper type="merge" to="NOTES"/>
			<filterset>
				<filter token="VERSION" value="${cvs.build.version}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<!-- create setup scripts -->
		<echo message="Creating setup scripts" />
		<mkdir dir="${release-dir}/setup/sql"/>
		<copy filtering="true" todir="${release-dir}/setup/sql">
			<fileset dir="${dir.build.cvs}/${cvs.module.name}/defs/sql"
				includes="**"/>
		</copy>
		
		<!-- copy JDBC drivers -->
		<echo message="Copying JDBC drivers" />
		<mkdir dir="${release-dir}/setup/lib"/>
		<copy todir="${release-dir}/setup/lib">
			<fileset dir="${dir.build.cvs}/${cvs.module.name}/lib/jdbc"
				includes="**"/>
		</copy>

		<!-- copy misc README files -->
		<echo message="Copying README files" />
		<copy filtering="true" todir="${release-dir}">
			<fileset dir="${dir.build.cvs}/${cvs.module.name}/defs/docs"
				includes="README-*.txt"/>
			<mapper type="glob" from="*.txt" to="*"/>
			<filterset>
				<filter token="VERSION" value="${cvs.build.version}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>
		
		<!-- copy licenses -->
		<echo message="Copying licenses" />
		<mkdir dir="${release-dir}/licenses"/>
		<copy todir="${release-dir}/licenses" flatten="true">
			<fileset dir="${dir.build.cvs}/${cvs.module.name}/defs/docs/licenses" includes="**/*.txt"/>
			<mapper type="glob" from="*.txt" to="*"/>
			<filterset>
				<filter token="VERSION" value="${cvs.build.version}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>
		
		<!-- copy war, removing version from name -->
		<copy file="${dir.build}/${app.archive.name}.war" 
			tofile="${release-dir}/${app.name}.war"/>

		<!-- tar it alll up -->
		<tar tarfile="${release-name}" compression="bzip2" longfile="gnu">
			<tarfileset dir="${dir.build}" 
				includes="${release-dir-name}/**">
			</tarfileset>
		</tar>

	</target>
	
	<target name="demo" description="Create the Live Demo">
		
		<antcall target="prepare" inheritall="true">
			<param name="env.src" value="demo"/>
			<param name="dir.env" value="environment/demo"/>
		</antcall>
		
		<antcall target="compile" inheritall="true"/>
		
		<mkdir dir="${dir.build}/${app.name}-demo"/>
		<copy todir="${dir.build}/${app.name}-demo">
			<fileset dir="${dir.base}/defs/demo">
				<!--include name="apache-tomcat/**"/-->
				<include name="*.sh"/>
				<include name="*.bat"/>
			</fileset>
		</copy>
		
		<!-- expand Tomcat zip -->
		<unzip dest="${dir.build}/${app.name}-demo" src="${dir.base}/defs/demo/apache-tomcat.zip"/>

		<!-- expand database zip -->
		<mkdir dir="${dir.build}/${app.name}-demo/db"/>
		<unzip dest="${dir.build}/${app.name}-demo/db" src="${dir.base}/defs/demo/db.zip"/>
		
		<!-- fix file permissions -->
		<chmod perm="755">
			<fileset dir="${dir.build}/${app.name}-demo">
				<include name="**/*.sh"/>
			</fileset>
		</chmod>
		
		<!-- add Derby, etc JARs to Tomcat classpath -->
		<copy todir="${dir.build}/${app.name}-demo/apache-tomcat/common/lib">
			<fileset dir="${dir.base}/lib/jdbc" includes="derby*.jar"/>
		</copy>
		
		<!-- add tidbits.xml Tomcat configuration -->
		<copy todir="${dir.build}/${app.name}-demo/apache-tomcat/conf/Catalina/localhost">
			<fileset dir="${dir.base}/defs/demo" includes="tidbits.xml"/>
		</copy>
		
		<!-- copy app webapp -->
		<copy todir="${dir.build}/${app.name}-demo/apache-tomcat/webapps">
			<fileset dir="${dir.build}" includes="${app.name}/**"/>
		</copy>
		<copy todir="${dir.build}/${app.name}-demo/apache-tomcat/webapps/${app.name}/WEB-INF">
			<fileset dir="${dir.base}/${dir.web}/WEB-INF" includes="web.xml"/>
		</copy>
		
	</target>	

	<!--
	  Create a Live Demo release tarball by checkout out a version of the code from CVS.
	  
	  Note you must call either cvs-checkout or cvs-update before calling this target.
	  Also note that dir.build and dir.build.cvs should point to absolute paths.
	 -->
	<target name="cvs-demo-release" description="Create the Live Demo from CVS sources"
		depends="set-version,clean,init">
		
		<property name="demo.build.dir" value="${app.name}-${cvs.build.version}-livedemo"/>
		
		<!-- call the demo target on the code checked out from CVS -->
		<ant dir="${dir.build.cvs}/${cvs.module.name}" inheritall="true" target="demo">
			<property name="dir.build" value="${dir.build}"/>
			<property name="env.src" value="demo"/>
		</ant>
		
		<!-- copy licenses -->
		<echo message="Copying licenses" />
		<mkdir dir="${dir.build}/${demo.build.dir}/licenses"/>
		<copy todir="${dir.build}/${demo.build.dir}/licenses" flatten="true">
			<fileset dir="${dir.build.cvs}/${cvs.module.name}/defs/docs/licenses" includes="**/*.txt"/>
			<mapper type="glob" from="*.txt" to="*"/>
			<filterset>
				<filter token="VERSION" value="${cvs.build.version}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>
		
		<!-- copy demo build -->
		<echo message="Copying demo build into CVS tar structure"/>
		<copy todir="${dir.build}/${demo.build.dir}">
			<fileset dir="${dir.build}/${app.name}-demo" includes="**"/>
		</copy>
		
		<!-- fix file permissions -->
		<chmod perm="755">
			<fileset dir="${dir.build}/${demo.build.dir}">
				<include name="**/*.sh"/>
			</fileset>
		</chmod>
		
		<!-- tar it up -->
		<tar destfile="${dir.dist}/${app.archive.name}-livedemo.tbz2" 
				compression="bzip2" longfile="gnu">
			<tarfileset dir="${dir.build}" mode="775">
				<include name="${demo.build.dir}/**/*.sh"/>
			</tarfileset>
			<tarfileset dir="${dir.build}">
				<include name="${demo.build.dir}/**"/>
				<exclude name="${demo.build.dir}/**/*.sh"/>
			</tarfileset>
		</tar>
	</target>
	
	<!-- Subversion build targets -->

	<target name="svn-checkout" description="Checkout sources from SVN">
		<delete dir="${svn.dir.build}"/>
		<mkdir dir="${svn.dir.build}"/>
		<svn username="${svn.username}" password="${svn.password}">
			<checkout url="${svn.url}" destPath="${svn.dir.build}"
				revision="${svn.revision}"/>
		</svn>
	</target>
	
	<target name="svn-update" description="Update sources previously checked out from SVN">
		<svn username="${svn.username}" password="${svn.password}">
			<update dir="${svn.dir.build}" revision="${svn.revision}"/>
		</svn>
	</target>
	
	<target name="svn-switch" 
		description="Switch sources previously checked out from SVN to another branch">
		<svn username="${svn.username}" password="${svn.password}">
			<switch path="${svn.dir.build}" url="${svn.url}" revision="${svn.revision}"/>
		</svn>
	</target>
	
	<!-- Copy environment properties (to catch local env) -->
	<target name="svn-prepare">
		<mkdir dir="${svn.dir.build}/${dir.env}"/>
		<copy todir="${svn.dir.build}/${dir.env}">
			<fileset dir="${dir.base}/${dir.env}" includes="**" excludes="README*"/>
		</copy>
	</target>

	<target name="svn-build" depends="clean,svn-prepare" description="Build from SVN tag versions">
		
		<property name="app.archive.name" value="${app.name}-${svn.tag}"/>
		
		<echo />
		<echo message="Building application version ${svn.tag} (${svn.revision})..."/>

		<ant dir="${svn.dir.build}" target="war" inheritall="no">
			<property name="build.version" value="${svn.tag}"/>
			<property name="dir.build" value="${dir.build}"/>
			<property name="catalina.home" value="${catalina.home}"/>
			<property name="env.src" value="${env.src}"/>
			<property name="dir.env" value="${dir.env}"/>
			<property name="dir.dist" value="${dir.dist}"/>
			<property name="app.name" value="${app.archive.name}"/>
		</ant>
		
	</target>
	
	<target name="svn-src-release" 
		description="Build source release TAR from SVN tag versions">

		<property name="app.archive.name" 
			value="${app.name}-${svn.tag}"/>
		<property name="release-source-dir-name"
			value="${app.archive.name}-src"/>
		<property name="release-source-dir" 
			value="${dir.build}/${release-source-dir-name}" />
		<property name="release-source-name" 
			value="${dir.dist}/${app.archive.name}-src.tbz2" />

		<echo message="Building source release ${release-source-name}" />

		<mkdir dir="${dir.dist}"/>
		<delete dir="${release-source-dir}" />
		<delete file="${release-source-name}" />

		<echo message="Creating source README" />
		<copy file="${svn.dir.build}/defs/docs/release/README.src.txt" 
			tofile="${release-source-dir}/README" filtering="true">
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Creating LICENSE" />
		<copy file="${svn.dir.build}/defs/docs/release/LICENSE.txt" 
			tofile="${release-source-dir}/LICENSE" filtering="true">
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Copying source to tar base directory" />
		<copy todir="${release-source-dir}">
			<fileset dir="${svn.dir.build}">
				<include name="**" />
				<include name=".*" />
				<exclude name="build/**" />
				<exclude name="dist/**" />
				<exclude name="environment/local/**" />
			</fileset>
		</copy>

		<tar tarfile="${release-source-name}" compression="bzip2" 
			longfile="gnu">
			<tarfileset dir="${dir.build}" 
				includes="${release-source-dir-name}/**" />
		</tar>
		
	</target>
	
	<!-- create binary release -->
	<target name="svn-bin-release" description="Build binary release TAR from SVN tag versions"
		depends="svn-build">
		
		<property name="release-dir-name"
			value="${app.archive.name}"/>
		<property name="release-dir" 
			value="${dir.build}/${release-dir-name}" />
		<property name="release-name" 
			value="${dir.dist}/${app.archive.name}.tbz2" />

		<echo message="Building binary release ${release-name}" />

		<delete dir="${release-dir}" />
		<delete file="${release-name}" />

		<echo message="Creating README" />
		<copy file="${svn.dir.build}/defs/docs/release/README.bin.txt" 
			tofile="${release-dir}/README" filtering="true">
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Creating LICENSE" />
		<copy file="${svn.dir.build}/defs/docs/release/LICENSE.txt" 
			tofile="${release-dir}/LICENSE" filtering="true">
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<echo message="Creating NOTES" />
		<copy filtering="true" todir="${release-dir}">
			<fileset dir="${svn.dir.build}/defs/docs/release/notes"
				includes="notes-${svn.tag}.txt"/>
			<mapper type="merge" to="NOTES"/>
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>

		<!-- copy misc README files -->
		<echo message="Copying README files" />
		<copy filtering="true" todir="${release-dir}">
			<fileset dir="${svn.dir.build}/defs/docs"
				includes="README-*.txt"/>
			<mapper type="glob" from="*.txt" to="*"/>
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>
		
		<!-- copy licenses -->
		<echo message="Copying licenses" />
		<mkdir dir="${release-dir}/licenses"/>
		<copy todir="${release-dir}/licenses" flatten="true">
			<fileset dir="${svn.dir.build}/defs/docs/licenses" includes="**/*.txt"/>
			<mapper type="glob" from="*.txt" to="*"/>
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>
		
		<!-- create setup scripts -->
		<echo message="Creating setup scripts" />
		<mkdir dir="${release-dir}/setup/sql"/>
		<copy filtering="true" todir="${release-dir}/setup/sql">
			<fileset dir="${svn.dir.build}/defs/sql" includes="**"/>
		</copy>
		
		<!-- copy JDBC drivers -->
		<echo message="Copying JDBC drivers" />
		<mkdir dir="${release-dir}/setup/lib"/>
		<copy todir="${release-dir}/setup/lib">
			<fileset dir="${svn.dir.build}/lib/jdbc" includes="**"/>
		</copy>

		<!-- copy war, removing version from name -->
		<copy file="${dir.build}/${app.archive.name}.war" 
			tofile="${release-dir}/${app.name}.war"/>

		<!-- tar it all up -->
		<tar tarfile="${release-name}" compression="bzip2" longfile="gnu">
			<tarfileset dir="${dir.build}" 
				includes="${release-dir-name}/**">
			</tarfileset>
		</tar>

	</target>
	
	<!--
	  Create a Live Demo release tarball by checkout out a version of the code from CVS.
	  
	  Note you must call either cvs-checkout or cvs-update before calling this target.
	  Also note that dir.build and dir.build.cvs should point to absolute paths.
	 -->
	<target name="svn-demo-release" description="Create the Live Demo from SVN sources"
		depends="clean">
		
		<property name="demo.build.dir" value="${app.name}-${svn.tag}-livedemo"/>
		<property name="app.archive.name" value="${app.name}-${svn.tag}"/>
		
		<!-- call the demo target on the code checked out from CVS -->
		<ant dir="${svn.dir.build}" inheritall="true" target="demo">
			<property name="dir.build" value="${dir.build}"/>
			<property name="env.src" value="demo"/>
			<property name="build.version" value="${svn.tag}"/>
		</ant>
		
		<!-- copy readme -->
		<copy filtering="true" todir="${dir.build}/${app.name}-demo">
			<fileset dir="${dir.base}/defs/docs/demo"
				includes="README*.txt"/>
			<mapper type="glob" from="*.txt" to="*"/>
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>
		
		<!-- copy licenses -->
		<echo message="Copying licenses" />
		<mkdir dir="${dir.build}/${demo.build.dir}/licenses"/>
		<copy todir="${dir.build}/${demo.build.dir}/licenses" flatten="true">
			<fileset dir="${svn.dir.build}/defs/docs/licenses" includes="**/*.txt"/>
			<mapper type="glob" from="*.txt" to="*"/>
			<filterset>
				<filter token="VERSION" value="${svn.tag}" />
				<filter token="BUILD_DATE" value="${build.time}" />
			</filterset>
		</copy>
		
		<!-- copy demo build -->
		<echo message="Copying demo build into SVN tar structure"/>
		<copy todir="${dir.build}/${demo.build.dir}">
			<fileset dir="${dir.build}/${app.name}-demo" includes="**"/>
		</copy>
		
		<!-- fix file permissions -->
		<chmod perm="755">
			<fileset dir="${dir.build}/${demo.build.dir}">
				<include name="**/*.sh"/>
			</fileset>
		</chmod>
		
		<!-- tar it up -->
		<tar destfile="${dir.dist}/${app.archive.name}-livedemo.tbz2" 
				compression="bzip2" longfile="gnu">
			<tarfileset dir="${dir.build}" mode="775">
				<include name="${demo.build.dir}/**/*.sh"/>
			</tarfileset>
			<tarfileset dir="${dir.build}">
				<include name="${demo.build.dir}/**"/>
				<exclude name="${demo.build.dir}/**/*.sh"/>
			</tarfileset>
		</tar>
	</target>
	
	<target name="help">
		<echo>TODO</echo>
	</target>
	
</project>
