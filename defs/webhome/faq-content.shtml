<h1><a name="top"></a>Frequently asked questions</h1>

<p class="intro">Here is a collection of frequently asked questions about Tidbits:</p>

<h2>Security and privacy considerations</h2>

<p>Tidbits has been designed to hold personal and private information, so security is 
important when considering how to deploy Tidbits. Generally, Tidbits relies on procedures
outside of the application itself to secure the data, such as encrypting the information
that is stored.</p>

<p>There are several places where Tidbits stores potentially sensitive information:</p>

<dl>
	<dt>Database</dt>
	<dd>All the data entered into Tidbits is stored in a database. Where the database physically 
	stores the data depends on the database.</dd>
	
	<dt>Search index</dt>
	<dd>Tidbits maintains a search index in a directory you specify. This index contains essentially
	a searchable copy of all the data in the database.</dd>
	
	<dt>Authentication context</dt>
	<dd>Authentication is configured in an XML file deployed as part of the Tidbits application. 
	This file is located at <b>WEB-INF/classes/security-context.xml</b>. Depending on how 
	authentication is configured, this file may contain usernames and passwords for Tidbits 
	users or to connect to some external authentication service, such as an LDAP server.</dd>
	
	<dt>Database username and password</dt>
	<dd>Technically Tidbits does not know the database username and password used to connect
	to the database, but the servlet container you deploy Tidbits into must be configured with
	this connection information.</dd>
</dl>

<h2>Data encryption</h2>

<p>Tidbits does not encrypt data directly, but it can be configured so that all data is stored
in encrypted forms.</p>

<dl>
	<dt>Does Tidbits encrypt the data in its database?</dt>
	<dd>No. Tidbits does not provide any encryption capabilities for storing the data. Instead it relies
	on the security if the database you deploy Tidbits into. Some database systems support encryption, 
	however. For example <a href="http://db.apache.org/derby/">Apache Derby</a> can be easily configured
	to encrypt the entire Tidbits database. 
	<a href="http://www.postgresql.org/docs/current/static/encryption-options.html">PostgreSQL</a> can 
	encrypt table columns. <a href="http://www.oracle.com/technology/deploy/security/db_security/transparent-data-encryption/index.html">Oracle</a> 
	provides many ways to encrypt the database, too. Some operating systems can make use of encrypted disk partitions
	such as <a href="http://en.wikipedia.org/wiki/Linux_Unified_Key_Setup">LUKS</a>, or encrypted file systems
	such as <a href="https://github.com/glk/pefs">PEFS</a>. See <a href="http://en.wikipedia.org/wiki/List_of_cryptographic_file_systems">Wikipedia</a>
	for more options. In short, there are many ways to encrypt the data stored in the Tidbits database, but all of those are outside the 
	scope of what Tidbits itself does.</dd>

	<dt>Does Tidbits encrypt the data stored in the search index?</dt>
	<dd>No. You must ensure you set the appropriate directory permissions for the directory you 
	configure Tidbits to use for its search index. You could store the index on an encrypted file system
	if you want the index data encrypted (the author has used <a href="https://github.com/glk/pefs">PEFS</a>
	&mdash; see <a href="http://en.wikipedia.org/wiki/List_of_cryptographic_file_systems">Wikipedia</a> for
	more examples).</dd>
	
	<dt>Does Tidbits encrypt the data while communicating with the database?</dt>
	<dd>No. However, Tidbits uses JDBC to communicate with the database, and many database systems support 
	SSL-encrypted JDBC connections. Consult the documentation for the JDBC driver of your database if you 
	want to encrypt the JDBC communication. Often this might not be an important issue, if the Tidbits
	application and database run on the same machine, or an embedded database like Derby is used. The 
	JDBC configuration is managed by the servlet container Tidbits runs in, so consult that documentation
	for help in configuring the JDBC settings.</dd>

	<dt>Does Tidbits encrypt the data while communicating with your web browser?</dt>
	<dd>No. If you want to make your Tidbits application publicly accessible, then you should only 
	allow SSL-encrypted (HTTPS) connections to your Tidbits deployment. This can be accomplished by 
	either running Tidbits behind a web server that is configured with SSL support or by configuring 
	the servlet container (<a href="http://tomcat.apache.org/tomcat-6.0-doc/ssl-howto.html">Tomcat</a>, 
	<a href="https://community.jboss.org/wiki/SSLSetup">JBoss</a>, etc.) to listen for SSL connections.</dd>
</dl>

<h2>Authentication</h2>

<p>Tidbits is quite flexible with respect to how users are authenticated and granted access 
to the application. Keep in mind that Tidbits is designed so that all users who are granted
access are then authorized to view <strong>all</strong> information stored in Tidbits. That is, the information a 
user can see is <strong>not</strong> limited to just the information they created &mdash; all
users can see all information in Tidbits.</p>

<p>Tidbits relies on the <a href="http://www.springsource.org/spring-security/">Spring Security</a> 
framework to handle authentication and authorization. This means you have a great deal of flexibility in how you grant
users access to Tidbits. The following sections detail various ways of configuring authentication, which
refer to the Tidbits security configuration file <code>WEB-INF/classes/security-context.xml</code>.</p>

<p class="alert alert-info">No matter what authentication approach is taken, Tidbits only requires that users are granted
a <strong>ROLE_USER</strong> authority to access the application.</p>
	
<h3>Simple user configuration</h3>

<p>In this form, usernames and their associated passwords and granted authorities are stored in clear text directly
in the <code>security-context.xml</code> file. This approach is only recommended for testing
purposes.</p>

<pre><code><span style="color: #0000CC;">&lt;authentication-manager</span><span style="color: #990066;">&nbsp;alias</span><span style="color: #990066;">=</span><span style="color: #993300;">"authenticationManager"</span><span style="color: #0000CC;">&gt;</span><span style="color: #000000;">
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000CC;">&lt;authentication-provider</span><span style="color: #990066;">&nbsp;user-service-ref</span><span style="color: #990066;">=</span><span style="color: #993300;">"detailsService"</span><span style="color: #0000CC;">&gt;</span><span style="color: #000000;">
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000CC;">&lt;/authentication-provider&gt;</span><span style="color: #000000;">
</span><span style="color: #0000CC;">&lt;/authentication-manager&gt;</span><span style="color: #000000;">

</span><span style="color: #0000CC;">&lt;user-service</span><span style="color: #990066;">&nbsp;id</span><span style="color: #990066;">=</span><span style="color: #993300;">"detailsService"</span><span style="color: #0000CC;">&gt;</span><span style="color: #000000;">
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #555555;">&lt;!--&nbsp;A&nbsp;login == &nbsp;test,&nbsp;password&nbsp;==&nbsp;test&nbsp;--&gt;</span><span style="color: #000000;">
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000CC;">&lt;user</span><span style="color: #990066;">&nbsp;name</span><span style="color: #990066;">=</span><span style="color: #993300;">"test"</span><span style="color: #990066;">&nbsp;authorities</span><span style="color: #990066;">=</span><span style="color: #993300;">"ROLE_USER"</span><span style="color: #990066;">&nbsp;password</span><span style="color: #990066;">=</span><span style="color: #993300;">"test"</span><span style="color: #0000CC;">/&gt;</span><span style="color: #000000;">
</span><span style="color: #0000CC;">&lt;/user-service&gt;</span><span style="color: #000000;">
</span></code></pre>

<h3>Simple secure user configuration</h3>

<p>In this form, usernames and their associated passwords and granted authorities are stored directly in the
<code>security-context.xml</code> file, but the passwords are stored as secure SHA-256
cryptographic hashes. In this way the passwords are secure, but the usernames are
still stored in plain text. This method is <em>always</em> preferred over the non-hashed
configuration described in the previous section.</p>

<pre><code><span style="color: #0000CC;">&lt;authentication-manager</span><span style="color: #990066;">&nbsp;alias</span><span style="color: #990066;">=</span><span style="color: #993300;">"authenticationManager"</span><span style="color: #0000CC;">&gt;</span><span style="color: #000000;">
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000CC;">&lt;authentication-provider</span><span style="color: #990066;">&nbsp;user-service-ref</span><span style="color: #990066;">=</span><span style="color: #993300;">"detailsService"</span><span style="color: #0000CC;">&gt;</span><span style="color: #000000;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000CC;">&lt;password-encoder</span><span style="color: #990066;">&nbsp;hash</span><span style="color: #990066;">=</span><span style="color: #993300;">"sha-256"</span><span style="color: #0000CC;">/&gt;</span><span style="color: #000000;">
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000CC;">&lt;/authentication-provider&gt;</span><span style="color: #000000;">
</span><span style="color: #0000CC;">&lt;/authentication-manager&gt;</span><span style="color: #000000;">

</span><span style="color: #0000CC;">&lt;user-service</span><span style="color: #990066;">&nbsp;id</span><span style="color: #990066;">=</span><span style="color: #993300;">"detailsService"</span><span style="color: #0000CC;">&gt;</span><span style="color: #000000;">
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #555555;">&lt;!--&nbsp;Login&nbsp;=&nbsp;test,&nbsp;password&nbsp;==&nbsp;test&nbsp;--&gt;</span><span style="color: #000000;">
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000CC;">&lt;user</span><span style="color: #990066;">&nbsp;name</span><span style="color: #990066;">=</span><span style="color: #993300;">"test"</span><span style="color: #990066;">&nbsp;authorities</span><span style="color: #990066;">=</span><span style="color: #993300;">"ROLE_USER"</span><span style="color: #990066;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;password</span><span style="color: #990066;">=</span><span style="color: #993300;">"9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08"</span><span style="color: #0000CC;">/&gt;</span><span style="color: #000000;">
</span><span style="color: #0000CC;">&lt;/user-service&gt;</span><span style="color: #000000;">
</span></code></pre>

<p>There are many ways to generate SHA-256 hashes from password strings, including  
<a href="http://www.webtoolkit.info/demo/javascript-sha-256">online web pages</a> that can
generate the hash text for you.</p> 

<h3>LDAP configuration</h3>

<p>In this form, a directory service is used to authenticate and authorize users, using the
LDAP protocol. Tidbits will authenticate the username and passwords supplied by users with the directory server,
and the directory server is expected to then return the granted authorities for that user.</p>

<p>There are two configuration elements to use for LDAP-based authentication: <string>ldap-server</strong>
and <strong>ldap-authentication-provider</strong>. The first defines the connection parameters necessary
to communicate with the directory server, the second defines how to authenticate users. There are several
ways to configure these elements, but here is one approach:</p>

<pre><code><span style="color: #0000CC;">&lt;ldap-server</span><span style="color: #990066;">&nbsp;url</span><span style="color: #990066;">=</span><span style="color: #993300;">"ldap://localhost/dc=example,dc=com"</span><span style="color: #990066;">&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;manager-dn</span><span style="color: #990066;">=</span><span style="color: #993300;">"cn=Authenticator,dc=example,dc=com"</span><span style="color: #990066;">
&nbsp;&nbsp;&nbsp;&nbsp;manager-password</span><span style="color: #990066;">=</span><span style="color: #993300;">"450934jerpiojr0937o"</span><span style="color: #0000CC;">/&gt;</span><span style="color: #000000;">
&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style="color: #0000CC;">&lt;authentication-manager</span><span style="color: #990066;">&nbsp;alias</span><span style="color: #990066;">=</span><span style="color: #993300;">"authenticationManager"</span><span style="color: #0000CC;">&gt;</span><span style="color: #000000;">
&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000CC;">&lt;ldap-authentication-provider</span><span style="color: #990066;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group-search-filter</span><span style="color: #990066;">=</span><span style="color: #993300;">"(&amp;(uniqueMember={0})(cn=Tidbits,ou=Groups,dc=example,dc=com))"</span><span style="color: #990066;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group-search-base</span><span style="color: #990066;">=</span><span style="color: #993300;">"ou=Groups"</span><span style="color: #990066;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user-search-base</span><span style="color: #990066;">=</span><span style="color: #993300;">"ou=People"</span><span style="color: #990066;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user-search-filter</span><span style="color: #990066;">=</span><span style="color: #993300;">"uid={0}"</span><span style="color: #990066;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group-role-attribute</span><span style="color: #990066;">=</span><span style="color: #993300;">"businessCategory"</span><span style="color: #0000CC;">
&nbsp;&nbsp;&nbsp;&nbsp;/&gt;</span><span style="color: #000000;">
</span><span style="color: #0000CC;">&lt;/authentication-manager&gt;</span><span style="color: #000000;">
</span></code></pre>

<p>In this configuration, Tidbits uses the <code>cn=Authenticator,dc=example,dc=com</code> DN to connect to 
the directory server. That user must have permission to search for users and compare password values, which
is configured in the <strong>ldap-authentication-provider</strong> element. Here users are searched by 
looking for matching <strong>uid</strong> attributes within the <code>ou=People,dc=example,dc=com</code>
tree. If found, and the supplied password matches, and the user is a member of the 
<code>cn=Tidbits,ou=Groups,dc=example,dc=com</code> then the user is granted the authorization
defined by the <strong>businessCategory</strong> attribute of that group, which must be 
<code>USER</code> in order to access Tidbits.</p>

<p class="alert alert-info">Simply put, this configuration lets any user that is a member of
the <code>cn=Tidbits</code> group to access Tidbits.</p>

<p>Here is an example LDIF formatted data for the relevant objects used in this example configuration:</p>

<pre>version: 1

<strong>dn: cn=Authenticator,dc=example,dc=com</strong>
objectClass: person
objectClass: top
cn: Authenticator
sn: Authenticator
<strong>userPassword:: e1NIQXLDKuyLdplkdeno83hjd09dsJSu7jPOJSPAOJF8</strong>

<strong>dn: cn=Test User,ou=People,dc=example,dc=com</strong>
objectClass: top
objectClass: person
objectClass: inetOrgPerson
cn: Test User
sn: User
<strong>uid: test</strong>
givenName: Test
<strong>userPassword:: e1NIQX1rbm5FUEJnRJVa3zRiMFFucXJlK1AwMXRDeVk9</strong>

<strong>dn: cn=Tidbits,ou=Groups,dc=example,dc=com</strong>
objectClass: top
objectClass: groupOfUniqueNames
cn: Tidbits
<strong>uniqueMember: cn=Test User,ou=People,dc=example,dc=com
businessCategory: User</strong>
</pre>
